From 31fa9af762eed42996a29d41a1927a98bd6fb5df Mon Sep 17 00:00:00 2001
From: Sasha Levin <sashal@kernel.org>
Date: Sun, 29 Jun 2025 19:05:05 +0200
Subject: smb: client: fix readdir returning wrong type with POSIX extensions

From: Philipp Kerling <pkerling@casix.org>

[ Upstream commit b8f89cb723b9e66f5dbd7199e4036fee34fb0de0 ]

When SMB 3.1.1 POSIX Extensions are negotiated, userspace applications
using readdir() or getdents() calls without stat() on each individual file
(such as a simple "ls" or "find") would misidentify file types and exhibit
strange behavior such as not descending into directories. The reason for
this behavior is an oversight in the cifs_posix_to_fattr conversion
function. Instead of extracting the entry type for cf_dtype from the
properly converted cf_mode field, it tries to extract the type from the
PDU. While the wire representation of the entry mode is similar in
structure to POSIX stat(), the assignments of the entry types are
different. Applying the S_DT macro to cf_mode instead yields the correct
result. This is also what the equivalent function
smb311_posix_info_to_fattr in inode.c already does for stat() etc.; which
is why "ls -l" would give the correct file type but "ls" would not (as
identified by the colors).

Cc: stable@vger.kernel.org
Signed-off-by: Philipp Kerling <pkerling@casix.org>
Signed-off-by: Steve French <stfrench@microsoft.com>
Signed-off-by: Sasha Levin <sashal@kernel.org>
---
 fs/cifs/readdir.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/fs/cifs/readdir.c b/fs/cifs/readdir.c
index 9e62d75f24651..2691785cee700 100644
--- a/fs/cifs/readdir.c
+++ b/fs/cifs/readdir.c
@@ -276,7 +276,6 @@ cifs_posix_to_fattr(struct cifs_fattr *fattr, struct smb2_posix_info *info,
 
 	if (fattr->cf_cifsattrs & ATTR_DIRECTORY) {
 		fattr->cf_mode |= S_IFDIR;
-		fattr->cf_dtype = DT_DIR;
 	} else {
 		/*
 		 * mark anything that is not a dir as regular
@@ -284,8 +283,9 @@ cifs_posix_to_fattr(struct cifs_fattr *fattr, struct smb2_posix_info *info,
 		 * attribute and will be marked as needing revaluation
 		 */
 		fattr->cf_mode |= S_IFREG;
-		fattr->cf_dtype = DT_REG;
 	}
+	/* Use S_DT to extract file type from cf_mode for cf_dtype */
+	fattr->cf_dtype = S_DT(fattr->cf_mode);
 
 	if (reparse_file_needs_reval(fattr))
 		fattr->cf_flags |= CIFS_FATTR_NEED_REVAL;
-- 
2.39.5

