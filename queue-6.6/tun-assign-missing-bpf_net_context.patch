From stable+bounces-119648-greg=kroah.com@vger.kernel.org Wed Feb 26 10:40:21 2025
From: "Ricardo Cañuelo Navarro" <rcn@igalia.com>
Date: Wed, 26 Feb 2025 10:39:06 +0100
Subject: tun: Assign missing bpf_net_context.
To: stable@vger.kernel.org,  Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Cc: revest@google.com, kernel-dev@igalia.com,  syzbot+0b5c75599f1d872bea6f@syzkaller.appspotmail.com,  syzbot+5ae46b237278e2369cac@syzkaller.appspotmail.com,  syzbot+c1e04a422bbc0f0f2921@syzkaller.appspotmail.com,  Jakub Kicinski <kuba@kernel.org>
Message-ID: <20250226-20250204-kasan-slab-use-after-free-read-in-dev_map_enqueue__submit-v3-2-360efec441ba@igalia.com>

From: Sebastian Andrzej Siewior <bigeasy@linutronix.de>

[ Upstream commit fecef4cd42c689a200bdd39e6fffa71475904bc1 ]

During the introduction of struct bpf_net_context handling for
XDP-redirect, the tun driver has been missed.
Jakub also pointed out that there is another call chain to
do_xdp_generic() originating from netif_receive_skb() and drivers may
use it outside from the NAPI context.

Set the bpf_net_context before invoking BPF XDP program within the TUN
driver. Set the bpf_net_context also in do_xdp_generic() if a xdp
program is available.

Reported-by: syzbot+0b5c75599f1d872bea6f@syzkaller.appspotmail.com
Reported-by: syzbot+5ae46b237278e2369cac@syzkaller.appspotmail.com
Reported-by: syzbot+c1e04a422bbc0f0f2921@syzkaller.appspotmail.com
Fixes: 401cb7dae8130 ("net: Reference bpf_redirect_info via task_struct on PREEMPT_RT.")
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Link: https://patch.msgid.link/20240704144815.j8xQda5r@linutronix.de
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
[rcn: Backport the patch to address minor differences in the context lines.
These differences are introduced by upstream commits
4d2bb0bfe874 ("xdp: rely on skb pointer reference in do_xdp_generic and
netif_receive_generic_xdp") and 7cd1107f48e2a ("bpf, xdp: constify some
bpf_prog * function arguments"), which change the parameters in
do_xdp_generic() and in calls to netif_receive_generic_xdp(),
kfree_skb_reason() and generic_xdp_tx(). These changes aren't
significant to the purpose of the patch.]
Signed-off-by: Ricardo CaÃ±uelo Navarro <rcn@igalia.com>
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
---
 drivers/net/tun.c |    7 +++++++
 net/core/dev.c    |    5 +++++
 2 files changed, 12 insertions(+)

--- a/drivers/net/tun.c
+++ b/drivers/net/tun.c
@@ -1668,6 +1668,7 @@ static struct sk_buff *tun_build_skb(str
 				     int len, int *skb_xdp)
 {
 	struct page_frag *alloc_frag = &current->task_frag;
+	struct bpf_net_context __bpf_net_ctx, *bpf_net_ctx;
 	struct bpf_prog *xdp_prog;
 	int buflen = SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 	char *buf;
@@ -1707,6 +1708,7 @@ static struct sk_buff *tun_build_skb(str
 
 	local_bh_disable();
 	rcu_read_lock();
+	bpf_net_ctx = bpf_net_ctx_set(&__bpf_net_ctx);
 	xdp_prog = rcu_dereference(tun->xdp_prog);
 	if (xdp_prog) {
 		struct xdp_buff xdp;
@@ -1735,12 +1737,14 @@ static struct sk_buff *tun_build_skb(str
 		pad = xdp.data - xdp.data_hard_start;
 		len = xdp.data_end - xdp.data;
 	}
+	bpf_net_ctx_clear(bpf_net_ctx);
 	rcu_read_unlock();
 	local_bh_enable();
 
 	return __tun_build_skb(tfile, alloc_frag, buf, buflen, len, pad);
 
 out:
+	bpf_net_ctx_clear(bpf_net_ctx);
 	rcu_read_unlock();
 	local_bh_enable();
 	return NULL;
@@ -2577,6 +2581,7 @@ static int tun_sendmsg(struct socket *so
 
 	if (m->msg_controllen == sizeof(struct tun_msg_ctl) &&
 	    ctl && ctl->type == TUN_MSG_PTR) {
+		struct bpf_net_context __bpf_net_ctx, *bpf_net_ctx;
 		struct tun_page tpage;
 		int n = ctl->num;
 		int flush = 0, queued = 0;
@@ -2585,6 +2590,7 @@ static int tun_sendmsg(struct socket *so
 
 		local_bh_disable();
 		rcu_read_lock();
+		bpf_net_ctx = bpf_net_ctx_set(&__bpf_net_ctx);
 
 		for (i = 0; i < n; i++) {
 			xdp = &((struct xdp_buff *)ctl->ptr)[i];
@@ -2599,6 +2605,7 @@ static int tun_sendmsg(struct socket *so
 		if (tfile->napi_enabled && queued > 0)
 			napi_schedule(&tfile->napi);
 
+		bpf_net_ctx_clear(bpf_net_ctx);
 		rcu_read_unlock();
 		local_bh_enable();
 
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -5082,11 +5082,14 @@ static DEFINE_STATIC_KEY_FALSE(generic_x
 
 int do_xdp_generic(struct bpf_prog *xdp_prog, struct sk_buff *skb)
 {
+	struct bpf_net_context __bpf_net_ctx, *bpf_net_ctx;
+
 	if (xdp_prog) {
 		struct xdp_buff xdp;
 		u32 act;
 		int err;
 
+		bpf_net_ctx = bpf_net_ctx_set(&__bpf_net_ctx);
 		act = netif_receive_generic_xdp(skb, &xdp, xdp_prog);
 		if (act != XDP_PASS) {
 			switch (act) {
@@ -5100,11 +5103,13 @@ int do_xdp_generic(struct bpf_prog *xdp_
 				generic_xdp_tx(skb, xdp_prog);
 				break;
 			}
+			bpf_net_ctx_clear(bpf_net_ctx);
 			return XDP_DROP;
 		}
 	}
 	return XDP_PASS;
 out_redir:
+	bpf_net_ctx_clear(bpf_net_ctx);
 	kfree_skb_reason(skb, SKB_DROP_REASON_XDP);
 	return XDP_DROP;
 }
